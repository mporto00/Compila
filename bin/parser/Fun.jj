/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
}

PARSER_BEGIN(Fun)
package parser;

public class Fun
{
  public static void main(String args []) throws ParseException
  {
    Fun parser = new Fun(System.in);

	try { 
    	parser.program();
    	System.out.println("Sucesso!");
  	} catch (ParseException e) {
  		System.out.println(e);
  	} catch (TokenMgrError e) {
  	  	System.out.println(e);
  	}
  }
}

PARSER_END(Fun)

TOKEN_MGR_DECLS : {
int	countLexError = 0;

public int foundLexError() {
	return countLexError;
  }
}
  
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

//comentário de bloco
SKIP : 
{ 
 "/*" : multilinecomment
}

<multilinecomment> SKIP :
{ 
 "*/" : DEFAULT
| <~[]>
}

//comentário de linha
SKIP : 
{ 
 "//" : singlelinecomment
}

<singlelinecomment> SKIP :
{ 
 <["\n","\r"]> : DEFAULT
| <~[]>
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LSQUARE : "[" >
| < RSQUARE : "]" >
| < LCURL : "{" >
| < RCURL : "}" >
| < LANGLE : "<" >
| < RANGLE : ">" >
| < EQUALTO : "=" >
| < EQUALTO_EQUALTO : "==" >
| < LANGLE_EQUALTO : "<=" >
| < RANGLE_EQUALTO : ">=" >
| < BANG_EQUALTO : "!=" >
| < DOT : "." >
| < AND: "&&">
| < OR: "||">
| < XOR: "^">
| < NOT: "!">
}

//RESERVED WORDS
TOKEN : {
 <IF: "if">
| <END: "end">
| <SUB: "sub">
| <LET: "let">
| <CALL: "call">
| <THEN: "then">
| <CASE: "case">
| <ELSE: "else">
| <INPUT: "input">
| <PRINT: "print">
| <SELECT: "select">
| <STATIC: "static">
| <STRING: "string">
| <SUPER: "super">
| <RETURN: "return">
| <READ: "read">
| <NEW: "new">
| <INT: "int">
| <FOR: "for">
| <EXTENDS: "extends">
| <CONSTRUCTOR: "constructor">
| <CLASS: "class">
| <BREAK: "break">

    | < WHILE: "while" >
    | < DO: "do" >
    | < SWITCH: "switch" >
    | < DEFAULTT: "default" >
    | < DOUBLE: "double" >

    | < BYTE: "byte" >
    | < SHORT: "short" >
    | < LONG: "long" >
    | < FINAL: "final" >
    | < PUBLIC: "public" >
    | < PRIVATE: "private" >
    | < PROTECTED: "protected" >
    | < BOOL: "bool" >
}

//IDENTIFIER TOKEN
TOKEN : {
  <#DIGIT : [ "0"-"9" ] >
| <CONSTANT : (< DIGIT >)+ >
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(["$"])?>
| <#LETTER: (["a"-"z","A"-"Z"])>
| <#FLOAT: (< DIGIT >)+("."(<DIGIT>)+)?>
| <LOGIC_CONSTANT: "true" | "false">
| <CHAR : ~[]> } /*confirmar possibilidade de /n */


//CONSTANTES
TOKEN : 
{
    < byte_constant: (<DIGIT>)+ >
    |
    < short_constant: (<DIGIT>)+ >
    |
	< int_constant:(  
            ( (<DIGIT>)+ ) // números decimais 
            | (["0"-"7"] (["0"-"7"])* ["o", "O"] ) // octais 
            | ((<DIGIT> | ["A"-"F","a"-"f"])* ["h", "H"] ) //Hexadecimais 
            | (["0"-"1"] (["0"-"1"])* ["b", "B"]) // binarios
    ) >
    |
    < long_constant:( (<DIGIT>)+ ["l", "L"] ) >
    |
    < float_constant:( (<DIGIT>)* "." (<DIGIT>)+ ["f","F"]) >
    |
    < double_constant:( (<DIGIT>)* "." (<DIGIT>)+ ) >
    |
    < char_constant:
    "'" ( ["a"-"f","A"-"F"] | <DIGIT> ) "'" >
    |
    < string_constant:    
    "\""( ~["\"","\n","\r"])* "\"" >
    |
    < bool_constant: (<TRUE> | <FALSE>) >
    |
    < #TRUE: "true" >
    |
    < #FALSE: "false" >
    |
    < null_constant: "null" >  
  }
	
//TOKEN P/ LANÇAR ERRO LÉXICO
SPECIAL_TOKEN : {
<INVALID_LEXICAL:
(~["a"-"z", "A"-"Z",
   "0"-"9",
   "\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	"<",
	">",
	"=",
	";",
	",",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"])+>
	
| < INVALID_CONST:
	"\"" (~ ["\n","\r","\""])* ["\n","\r"] >
}
   
     

void program() :
{}
{
  (
    <PLUS> { System.out.println("Reconheceu PLUS"); } 
  | <MINUS> { System.out.println("Reconheceu MINUS"); } 
  | <MULTIPLY> { System.out.println("Reconheceu MULTIPLY"); } 
  | <DIVIDE> { System.out.println("Reconheceu DIVIDE"); }  
  )*
}

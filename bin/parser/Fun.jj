options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;

import java.io.*;
import recovery.*; // importa as classes de recuperacao	de erros do AS
import syntacticTree.*;

public class Fun {
   int contParseError = 0; // contador de erros sintaticos
   boolean debug_recovery; // controla verbose de recuperacao de erros
   boolean Menosshort = false;
   Token lastError = null;

	public static void main(String args []) throws ParseException {
	    boolean debug_as = false;
	    boolean debug_recovery = false;
	    boolean debug = false;
	    Fun parser = new Fun(System.in);
	    String filename = "programaaceito4.txt";
	    int i;
	    boolean ms = false;
	    
	    for (i=0 ; i < args.length - 1 ; i++) {
			if ( args[i].equals("-debug_AS")) 
				debug_as = true;
			else
			if (args[i].equals("-debug_recovery")) 
				debug_recovery = true;
			 else {
				System.out.println("Metodo de uso e: Java LangFun [-debug_AS]" + "[-debug_recovery] inputfile");
				System.exit(0);
			}
		}

		// le entrada padrao
		// if (args[i].equals("-")) {
		  if (false) { 
			System.out.println("Lendo entrada padrao..");
			parser = new Fun(System.in); // cria AS
		}
		// le do arquivo
		else {
		    //filename = args[args.length-1];
			System.out.println("Lendo do arquivo " +  filename);
	    	try {
	    		parser = new Fun (new java.io.FileInputStream(filename) );
	    	} catch (java.io.FileNotFoundException e) {
	    		System.out.println("Arquivo " + filename + " nao encontrado.");
	    		return;
	    	}
		}
		 ListNode root = null;
		 
	     parser.debug_recovery = debug_recovery;
	     if (!debug_as) parser.disable_tracing(); // desabilita verbose do AS
	     try {
	       	root = parser.program();   // chama o metodo que faz a analise	
	     }
	     catch (ParseEOFException e)
	     {
	           System.err.println(e.getMessage());
	       //parser.contParseError = 1;  //  nao existe recuperacao de erros
	       }
	       finally {
	           System.out.println(parser.token_source.foundLexError() + " erros lexico encontrados");
	           System.out.println(parser.contParseError + " erros sintaticos encontrados");
	       }
	} // main
	
static public String im(int x) {
	int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {s = s.substring(1,k);}
    catch (StringIndexOutOfBoundsException e)
    {}
    return s;
}

boolean eof;	// variavel que indica se o EOF foi alcan�ado
// o metodo abaixo consome tokens ate alcan�ar um que perten�a
// ao conjunto de sincroniza�ao

void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
		{
		Token tok;

		   if ( debug_recovery) { // informa��o sobre a recupera��o 
		       System.out.println();
		       System.out.println("*** " + met + " ***");
		       System.out.println("     Syncronizing Set: " + g);
		   }

		   if (g == null) throw e; // se o conjunto � null, propaga a exce��o

		   tok = getToken(1); // pega token corrente
		   while ( ! eof ) { // se n�o chegou ao fim do arquivo
			if ( g.contains(tok.kind ) ) { //achou um token no conjunto
			     if ( debug_recovery)
			       System.out.println("     Found syncronizing token: " + im(tok.kind));
			     break;
			}
			if (debug_recovery)
			     System.out.println("     Ignoring token: " + im(tok.kind));
			getNextToken();     // pega pr�ximo token       
			tok = getToken(1);
			if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
			    eof = true;
		    }
		   if ( tok != lastError) {
			System.out.println(e.getMessage());
			lastError = tok;
			contParseError++;  // incrementa n�mero de erros
		   }
		   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
		}
} // fun

PARSER_END(Fun)

TOKEN_MGR_DECLS : {
int	countLexError = 0;

public int foundLexError() {
	return countLexError;
  }
}
  
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

//coment�rio de bloco
SKIP : 
{ 
 "/*" : multilinecomment
}

<multilinecomment> SKIP :
{ 
 "*/" : DEFAULT
| <~[]>
}

//coment�rio de linha
SKIP : 
{ 
 "//" : singlelinecomment
}

<singlelinecomment> SKIP :
{ 
 <["\n","\r"]> : DEFAULT
| <~[]>
}

TOKEN : /* OPERATORS */
{
  < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REM : "%" >

/*added*/

| < AND: "and">
| < OR: "or">
| < XOR: "xor">
| < NOT: "not">
}

// SIMBOLOS ESPECIAIS
TOKEN :
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < DOT : "." >
}
//RESERVED WORDS

TOKEN :
{
  <BREAK: "break">
| <CLASS: "class">
| <CONSTRUCTOR: "constructor">
| <ELSE: "else">
| <EXTENDS: "extends">
| <FOR: "for">
| <IF: "if">
| <NEW: "new">
| <PRINT: "print">
| <READ: "read">
| <RETURN: "return">
| <SUPER: "super">
| <INT: "int">
| <STRING: "string">
| <FLOAT: "float">
| <BOOLEAN: "boolean">
| <CHAR: "char">
}

//IDENTIFIER TOKEN

TOKEN : /* CONSTANTES NUMERICAS */
{
		< float_constant: <int_constant> "." ( <int_constant> )+ >
  | 	< int_constant: ( <DIGIT> )+
  |     (["0"-"7"] (["0"-"7"])* ["o", "O"] ) 
  |     ((<DIGIT> | ["A"-"F","a"-"f"])* ["h", "H"] )
  |     (["0"-"1"] (["0"-"1"])* ["b", "B"]) >
  | 	< #DIGIT: ["0" - "9"] >
}

TOKEN : {
  
  <#LETTER: (["a"-"z","A"-"Z"])> 
| <CONSTANT : (< DIGIT >)+ >
| <boolean_constant: <TRUE> | <FALSE>  >
| <char_constant :"'"~[]"'" | "'\\n'" >
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(["$"])?>
| <string_constant: "\""( ~["\"","\n","\r"])* "\"" >
| <#TRUE: "true" | "TRUE" >
| <#FALSE: "false" | "FALSE" >
| <null_constant: "null" >
}

//TOKEN P/ LAN�AR ERRO L�XICO
SPECIAL_TOKEN : {
<INVALID_LEXICAL:
(~["a"-"z", "A"-"Z",
   "0"-"9",
   "\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	"<",
	">",
	"=",
	";",
	",",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"])+> {
	  	System.err.println("Line " + input_stream.getEndLine() + " - invalid string found: " + image);
	  	countLexError++;
	 }	
| < INVALID_CONST:
	"\"" (~ ["\n","\r","\""])* ["\n","\r"] > {
	    System.err.println("Line " + input_stream.getEndLine() + " - String constant has a \\n: " + image);
	  	countLexError++;
	  }
| < INVALID_CHAR:
	"'" (~ ["\n","\r","'"])* ["\n","\r"] > {
	    System.err.println("Line " + input_stream.getEndLine() + " - Char constant has a \\n: " + image);
	  	countLexError++;
	  }

}


ListNode program() throws ParseEOFException :
{
	RecoverySet g = First.program;

	ListNode l = null, d = null;
}
{
  <EOF>
|
(  	l = classlist(g)
  	try { 
  		<EOF> { return l; }
    }
	catch (ParseException e) {
		consumeUntil(g, e, "program");
	}
	[ d = program() ]
) { return l; }
}

ListNode classlist(RecoverySet g) throws ParseEOFException :
{
ClassDeclNode c = null;
ListNode l = null;

RecoverySet f = First.classlist.union(g);
}
{
  (
   c = classdecl(f) [ LOOKAHEAD(2) l = classlist(g) ]
  ) { return new ListNode(c, l); }
}

ClassDeclNode classdecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2 = null, t3 = null;
  ClassBodyNode c1 = null;
}
{	
try { 
  t1 = <CLASS> t2 = <IDENTIFIER> [ <EXTENDS> t3 = <IDENTIFIER> ] c1 = classbody(g)
  { return new ClassDeclNode(t1, t2, t3, c1); }
}
catch (ParseException e){
	consumeUntil(g, e, "classdecl");
	return new ClassDeclNode(t1, t2, t3, c1); 
}
}

ClassBodyNode classbody(RecoverySet g) throws ParseEOFException :
{
  ListNode  c = null,
  			v = null,
  			ct = null,
  			m = null;
  VarDeclNode vd;
  ConstructDeclNode cd;
  MethodDeclNode md;
  Token t = null;
  
  RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENTIFIER),
  			  f3 = First.methoddecl.union(g).remove(IDENTIFIER),
  			  f4 = First.constructdecl.union(f3).remove(IDENTIFIER),
  			  f5 = First.vardecl.union(f4).remove(IDENTIFIER);
}
{
  try { 
    t = <LBRACE>
      [ c = classlist(f5)]
      (
       LOOKAHEAD(3) vd = vardecl(f2) <SEMICOLON>
		{ 	if (v == null)
				v = new ListNode(vd);
			else
				v.add(vd);
		}
      )*
      (
       LOOKAHEAD(3) cd = constructdecl(f4)
	       { 	if (ct == null)
					ct = new ListNode(cd);
				else
					ct.add(cd);
			}
       |
       LOOKAHEAD(3) md = methoddecl(f3)
       		{ 	if (m == null)
					m = new ListNode(md);
				else
					m.add(md);
			}
       |
       LOOKAHEAD(3) vd =  vardecl(f2) <SEMICOLON>
			{ 	if (v == null)
				v = new ListNode(vd);
			else
				v.add(vd);
			}
      )*
   <RBRACE>
   { return new ClassBodyNode(t, c, v, ct, m); }
 } catch (ParseException e) {
		consumeUntil(g, e, "classbody");
		return new ClassBodyNode(t, c, v, ct, m);
   }
}

VarDeclNode vardecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2;
  int k = 0;
  ListNode l = null;
  RecoverySet f = new RecoverySet(IDENTIFIER).union(g);
}
{
 try { 
  t1 = types(f) t2 = <IDENTIFIER> ( <LBRACKET> <RBRACKET> { k++; })*
	{ l = new ListNode(new VarNode(t2, k)); }
  (LOOKAHEAD(1) assignment(g))?
  (<COMMA> { k = 0; } t2 = <IDENTIFIER> ( <LBRACKET> <RBRACKET> { k++; })*
	{ l.add(new VarNode(t2, k)); }
  )* 
  (LOOKAHEAD(1) assignment(g))?
  { return new VarDeclNode(t1, l); }
}
catch (ParseException e) {
	consumeUntil(g, e, "vardecl");
	return new VarDeclNode(t1, l);
  }
}

ConstructDeclNode constructdecl(RecoverySet g) throws ParseEOFException:
{
  Token t = null;
  MethodBodyNode m = null;
}
{
 try {
    t = <CONSTRUCTOR> m = methodbody(g)
    { return new ConstructDeclNode(t, m); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "constructdecl");
   return new ConstructDeclNode(t, m);
}
}

//SIMPLIFICACAOO DE CODIGO
void types(RecoverySet g) throws ParseEOFException :
{
}
{
 try{
  ( <INT> | <FLOAT> | <CHAR> | <STRING> | <IDENTIFIER> | <BOOLEAN>)
  }catch (ParseException e)
{
   consumeUntil(g, e, "types");
}
}

MethodDeclNode methoddecl(RecoverySet g) throws ParseEOFException:
{
  Token t1 = null,
  		t2 = null;
  int k = 0;
  MethodBodyNode m = null;
  
  RecoverySet f = new RecoverySet(IDENTIFIER).union(g);
}
{
  try {
   t1 = types(f)
   (<LBRACKET> <RBRACKET> { k++; })* 
   t2 = <IDENTIFIER> m = methodbody(g)
   		{ return new MethodDeclNode(t1, k, t2, m); }
 }
  catch (ParseException e)
  {
   consumeUntil(g, e, "methoddecl");
   return new MethodDeclNode(t1, k, t2, m);
  }
}

MethodBodyNode methodbody(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null;
  ListNode l = null;
  StatementNode s = null;
  
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try { 
    t1 = <LPAREN> l = paramlist(f) <RPAREN> s = statement(g)
    	{ return new MethodBodyNode(t1, l, s); }
  }
  catch (ParseException e) {
		consumeUntil(g, e, "methodbody");
		return new MethodBodyNode(t1, l, s);
   }
}

ListNode paramlist(RecoverySet g) throws ParseEOFException :
{
  ListNode p = null, q = null;
  int k = 0;
  Token t1 = null, t2 = null;
  
  RecoverySet f1 = new RecoverySet(IDENTIFIER).union(g);
}
{
  try { 	
   [
    t1 = types(f1)
    t2 = <IDENTIFIER>
    (<LBRACKET> <RBRACKET> { k++; })*
		{
			q = new ListNode(new VarNode(t2, k));
			p = new ListNode(new VarDeclNode(t1, q));
		}
    (LOOKAHEAD(1) assignment(g))?
    (	<COMMA> { k =0; }
    t1 = types(f1)
    t2 = <IDENTIFIER> (<LBRACKET> <RBRACKET> { k++; })*
		{
			q = new ListNode(new VarNode(t2, k));
			p.add(new VarDeclNode(t1, q));
		}
    (LOOKAHEAD(1) assignment(g))?
    )* 
   ] { return p; }
 }
 catch (ParseException e) {
		consumeUntil(g, e, "paramlist");
		return null;
   }
}

StatementNode statement(RecoverySet g) throws ParseEOFException :
{
  StatementNode s = null;
  ListNode l;
  Token t1 = null;
  
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENTIFIER);
  RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENTIFIER);
}
{
  try {
(
    LOOKAHEAD(4)
    s = vardecl(f1) <SEMICOLON>
|
	LOOKAHEAD(1)
    s = atribstat(f1) <SEMICOLON> 
|
    s = printstat(f1) <SEMICOLON>
|
    s = readstat(f1) <SEMICOLON>
|
    s = returnstat(f1) <SEMICOLON>
|
    s = superstat(f1) <SEMICOLON>
|
    s = ifstat(g) 
|
    s = forstat(g) 
|
    t1 = <LBRACE> l = statlist(f2) <RBRACE> { s = new BlockNode(t1, l); }
|
    t1 = <BREAK> <SEMICOLON> { s = new BreakNode(t1); }
|
    t1 = <SEMICOLON> { s = new NopNode(t1); }
) { return s; }
  }
  catch (ParseException e) {
		consumeUntil(g, e, "statement");
		return new NopNode(t1); 
  }
}

AtribNode atribstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t1 = null;
  
  RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
  try {
    e1 = lvalue(f1) t1 = <ASSIGN>
    // mudei de assignement(g) para o que era antes, verificar se ficou certo
    (e2 = alocexpression(g) | e2 = expression(g))
    { return new AtribNode(t1, e1, e2); }
  }	
  catch (ParseException e) {
		consumeUntil(g, e, "atribstat");
		return new AtribNode(t1, e1, e2);
  }
}

PrintNode printstat(RecoverySet g) throws ParseEOFException :	
{
  ExpreNode e1 = null;
  Token t = null;
}
{
  try { 
    t = <PRINT> e1 = expression(g)
    	{ return new PrintNode(t, e1); }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "printstat");
	return new PrintNode(t, e1);
  }
}

ReadNode readstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  Token t = null;
}
{
  try { 
    t = <READ> e1 = lvalue(g)
    	{ return new ReadNode(t, e1); }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "readstat");
	return new ReadNode(t, e1);
  }
}


ReturnNode returnstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  Token t = null;
}
{  
  try { 
    t = <RETURN> [ e1 = expression(g)]
    	{ return new ReturnNode(t, e1); }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "returnstat");
	return new ReturnNode(t, e1);
  }
}


SuperNode superstat(RecoverySet g) throws ParseEOFException :
{
  ListNode l = null;
  Token t = null;
  
  RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
  try { 
    t = <SUPER> <LPAREN> l = arglist(f) <RPAREN>
    	{ return new SuperNode(t, l); }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "superstat");
	return new SuperNode(t, l);
  }
}

IfNode ifstat(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null;
  StatementNode s1 = null,
  				s2 = null;
  Token t = null;
  
  RecoverySet f1 = new RecoverySet(RPAREN).union(g),
  			  f2 = new RecoverySet(ELSE).union(g);
}
{
  try { 
    t = <IF> <LPAREN> e1 = expression(f1) <RPAREN> s1 = statement(f2)
    [LOOKAHEAD(1) <ELSE> s2 = statement(g)]
    { return new IfNode(t, e1, s1, s2); }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "ifstat");
	return new IfNode(t, e1, s1, s2); 
  }
}

ForNode forstat(RecoverySet g) throws ParseEOFException :
{
  AtribNode s1 = null,
  			s2 = null;
  StatementNode s3 = null;
  ExpreNode e1 = null;
  Token t = null;
  
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
  			  f2 = new RecoverySet(RPAREN).union(g);
}
{
  try { 
    t = <FOR> <LPAREN> [s1 = atribstat(f1)] <SEMICOLON>
                   [e1 = expression(f1)] <SEMICOLON>
                   [s2 = atribstat(f2)] <RPAREN>
                    s3 = statement(g)
     { return new ForNode(t, e1, s1, s2, s3); }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "forstat");
	return new ForNode(t, e1, s1, s2, s3);
  }
}

void assignment(RecoverySet g) throws ParseEOFException :
{
}
{
    <ASSIGN> (alocexpression(g) | expression(g))
}

ListNode statlist(RecoverySet g) throws ParseEOFException :
{
  ListNode l = null;
  StatementNode s = null;
  
  RecoverySet f = First.statlist.remove(IDENTIFIER).union(g);
}
{
   s = statement(f) [ l = statlist(g)]
   { return new ListNode(s, l); }
}

ExpreNode lvalue(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null,
  			e2 = null;
  Token t1 = null,
  		t2 = null;
  ListNode l = null;
}
{
  try { 
   t1 = <IDENTIFIER> { e1 = new VarNode(t1); }
   (
            t1 = <LBRACKET> e2 = expression(null) <RBRACKET>
				{ e1 = new IndexNode(t1, e1, e2); }
    |
			LOOKAHEAD(3)
            t1 = <DOT> t2 = <IDENTIFIER> <LPAREN> l = arglist(null) <RPAREN>
             	{ e1 = new CallNode(t1, e1, t2, l); }
    |
    		t1 = <DOT> t2 = <IDENTIFIER>
    			{ e1 = new DotNode(t1, e1, t2); }
   )*
   { return e1; }
  	}
  	catch (ParseException e) {
		consumeUntil(g, e, "lvalue");
		return new VarNode(t1);
  	}
}

ExpreNode alocexpression(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null,
  			e2 = null;
  ListNode l = null;
  Token t1, t2;
  
  RecoverySet f1 = new RecoverySet(RPAREN).union(g),
  			  f2 = new RecoverySet(RBRACKET).union(g);
}
{
    t1 = <NEW>
    	( 
             LOOKAHEAD(2) t2 = <IDENTIFIER> <LPAREN> l = arglist(f1) <RPAREN>
				{ e1 = new NewObjectNode(t1, t2, l); }
         | 
             t2 = types(g)
             (<LBRACKET> e2 = expression(f2) <RBRACKET>
					{
						if ( l == null )
							l = new ListNode(e2);
						else
							l.add(e2);
					}
             )+
             	{ e1 = new NewArrayNode(t1, t2, l); }
        )
        { return e1; }
}

ExpreNode expression(RecoverySet g) throws ParseEOFException :
{
  ExpreNode e1 = null, e2 = null;
  Token t = null;
}
{
  try { 
    e1 = numexpr()
    [
    ( t = <LT> | t = <GT> | t = <LE> | t = <GE> | t = <EQ> | t = <NEQ> | t = <AND> | t = <OR> | t = <XOR>)
    e2 = numexpr()
    ]
    { return e1; }
  }
  catch (ParseException e) {
		consumeUntil(g, e, "expression");
		return new RelationalNode(t, e1, e2);
  }
}

ExpreNode numexpr() throws ParseEOFException :
{
  ExpreNode e1 = null, e2;
  Token t;
}
{
    e1 = term()
    (
      	(t = <PLUS> | t = <MINUS>)
    	e2 = term()
    		{ e1 = new AddNode(t, e1, e2); }
    )*
    { return e1; } 
}

ExpreNode term() throws ParseEOFException :
{
  ExpreNode e1 = null, e2;
  Token t;
}
{
    e1 = unaryexpr()
    (
      	(t = <MULTIPLY> | t = <DIVIDE>| t = <REM>)
    	e2 = unaryexpr()
    		{ e1 = new MultNode(t, e1, e2); }
    )*
    { return e1; } 
}

ExpreNode unaryexpr() throws ParseEOFException :
{
  ExpreNode e;
  Token t = null;
}
{
   [( t = <PLUS> | t = <MINUS>)] e = factor()
   	{ return ( (t == null) ? e : new UnaryNode(t, e)); }
}


ExpreNode factor() throws ParseEOFException :
{
  ExpreNode e = null;
  Token t; 
}
{
   (<NOT>)?
    (
       t = <char_constant>	{ e = new CharConstNode(t); }
       |
       t = <int_constant>	{ e = new IntConstNode(t); }
       | 
       t = <float_constant>	{ e = new FloatConstNode(t); }
       | 
       t = <string_constant>	{ e = new StringConstNode(t); }
       | 
       t = <boolean_constant>	{ e = new BooleanConstNode(t); }
       |
       t = <null_constant>	{ e = new NullConstNode(t); }
       |
       lvalue(null)
       |
       <LPAREN> e = expression(null) <RPAREN>
    )
    { return e; }
}

ListNode arglist(RecoverySet g) throws ParseEOFException :
{
  ListNode l = null;
  ExpreNode e = null;
   
  RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
    [
    	e = expression(f)
			{ l = new ListNode(e); }
    	(<COMMA> e = expression(f)
			{ l.add(e); }
    	)*
    ]
    { return l; }
}

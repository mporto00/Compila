/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
}

PARSER_BEGIN(Fun)
package parser;

public class Fun
{
  public static void main(String args []) throws ParseException
  {
    Fun parser = new Fun(System.in);

	try { 
    	parser.program();
    	System.out.println("Sucesso!");
  	} catch (ParseException e) {
  		System.out.println(e);
  	} catch (TokenMgrError e) {
  	  	System.out.println(e);
  	}
  }
}

PARSER_END(Fun)

TOKEN_MGR_DECLS : {
int	countLexError = 0;

public int foundLexError() {
	return countLexError;
  }
}
  
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

//comentário de bloco
SKIP : 
{ 
 "/*" : multilinecomment
}

<multilinecomment> SKIP :
{ 
 "*/" : DEFAULT
| <~[]>
}

//comentário de linha
SKIP : 
{ 
 "//" : singlelinecomment
}

<singlelinecomment> SKIP :
{ 
 <["\n","\r"]> : DEFAULT
| <~[]>
}

TOKEN : /* OPERATORS */
{
  < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REM : "%" >

/*added*/

| < AND: "and">
| < OR: "or">
| < XOR: "xor">
| < NOT: "not">
}

// SIMBOLOS ESPECIAIS
TOKEN :
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < DOT : "." >
}
//RESERVED WORDS

TOKEN :
{
  <BREAK: "break">
| <CLASS: "class">
| <CONSTRUCTOR: "constructor">
| <ELSE: "else">
| <EXTENDS: "extends">
| <FOR: "for">
| <IF: "if">
| <INT: "int">
| <NEW: "new">
| <PRINT: "print">
| <READ: "read">
| <RETURN: "return">
| <SUPER: "super">

/* added*/

| <END: "end">
| <SUB: "sub">
| <LET: "let">
| <CALL: "call">
| <THEN: "then">
| <CASE: "case">
| <INPUT: "input">
| <SELECT: "select">
| <STATIC: "static">
| <WHILE: "while" >
| <DO: "do" >
| <SWITCH: "switch" >
| <DOUBLE: "double" >
| <BYTE: "byte" >
| <SHORT: "short" >
| <LONG: "long" >
| <FINAL: "final" >
| <PUBLIC: "public" >
| <PRIVATE: "private" >
| <PROTECTED: "protected" >
}

//IDENTIFIER TOKEN

TOKEN : /* CONSTANTES NUMERICAS */
{
		< FLOAT: <INTEGER> "." ( <INTEGER> )+
    	>
  | 	< INTEGER: ( <DIGIT> )+
  |     (["0"-"7"] (["0"-"7"])* ["o", "O"] ) 
  |     ((<DIGIT> | ["A"-"F","a"-"f"])* ["h", "H"] )
  |     (["0"-"1"] (["0"-"1"])* ["b", "B"])  
  >
  | 	< #DIGIT: ["0" - "9"] >
}

TOKEN : {
  
  <#LETTER: (["a"-"z","A"-"Z"])> 
| <CONSTANT : (< DIGIT >)+ >
| <BOOLEAN: "true" | "false" | "TRUE" | "FALSE">
| <CHAR :"'"~[]"'" | "'\\n'" >
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(["$"])?>
| <STRING: "\""( ~["\"","\n","\r"])* "\"" >
| <NULL: "null" > }

//TOKEN P/ LANÇAR ERRO LÉXICO
SPECIAL_TOKEN : {
<INVALID_LEXICAL:
(~["a"-"z", "A"-"Z",
   "0"-"9",
   "\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	"<",
	">",
	"=",
	";",
	",",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"])+> {
	  	System.err.println("Line " + input_stream.getEndLine() + " - invalid string found: " + image);
	  	countLexError++;
	 }	
| < INVALID_CONST:
	"\"" (~ ["\n","\r","\""])* ["\n","\r"] > {
	    System.err.println("Line " + input_stream.getEndLine() + " - String constant has a \\n: " + image);
	  	countLexError++;
	  }
}

void program() :
{}
{
  (
    <PLUS> { System.out.println("Reconheceu PLUS"); } 
  | <MINUS> { System.out.println("Reconheceu MINUS"); } 
  | <MULTIPLY> { System.out.println("Reconheceu MULTIPLY"); } 
  | <DIVIDE> { System.out.println("Reconheceu DIVIDE"); }
  | <ASSIGN> { System.out.println("Reconheceu ASSIGN"); }
  | <GT> { System.out.println("Reconheceu GT"); } 
  | <LT> { System.out.println("Reconheceu LT"); } 
  | <EQ> { System.out.println("Reconheceu EQ"); } 
  | <LE> { System.out.println("Reconheceu LE"); }
  | <GE> { System.out.println("Reconheceu GE"); }
  | <NEQ> { System.out.println("Reconheceu NEQ"); } 
  | <REM> { System.out.println("Reconheceu REM"); } 
  | <AND> { System.out.println("Reconheceu AND"); } 
  | <OR> { System.out.println("Reconheceu OR"); }
  | <XOR> { System.out.println("Reconheceu XOR"); }
  | <NOT> { System.out.println("Reconheceu NOT"); } 
  | <SEMICOLON> { System.out.println("Reconheceu SEMICOLON"); } 
  | <COMMA> { System.out.println("Reconheceu COMMA"); } 
  | <LPAREN> { System.out.println("Reconheceu LPAREN"); }
  | <RPAREN> { System.out.println("Reconheceu RPAREN"); }
  | <LBRACKET> { System.out.println("Reconheceu LBRACKET"); } 
  | <RBRACKET> { System.out.println("Reconheceu RBRACKET"); } 
  | <LBRACE> { System.out.println("Reconheceu LBRACE"); } 
  | <RBRACE> { System.out.println("Reconheceu RBRACE"); }
  | <DOT> { System.out.println("Reconheceu DOT"); }
  | <BREAK> { System.out.println("Reconheceu BREAK"); } 
  | <CLASS> { System.out.println("Reconheceu CLASS"); } 
  | <CONSTRUCTOR> { System.out.println("Reconheceu CONSTRUCTOR"); } 
  | <ELSE> { System.out.println("Reconheceu ELSE"); }
  | <EXTENDS> { System.out.println("Reconheceu EXTENDS"); }
  | <FOR> { System.out.println("Reconheceu FOR"); } 
  | <IF> { System.out.println("Reconheceu IF"); } 
  | <INT> { System.out.println("Reconheceu INT"); }
  | <NEW> { System.out.println("Reconheceu NEW"); }
  | <PRINT> { System.out.println("Reconheceu PRINT"); }
  | <READ> { System.out.println("Reconheceu READ"); } 
  | <RETURN> { System.out.println("Reconheceu RETURN"); } 
  | <STRING> { System.out.println("Reconheceu STRING"); }
  | <SUPER> { System.out.println("Reconheceu SUPER"); }
  | <END> { System.out.println("Reconheceu END"); }
  | <SUB> { System.out.println("Reconheceu SUB"); } 
  | <LET> { System.out.println("Reconheceu LET"); } 
  | <CALL> { System.out.println("Reconheceu CALL"); }
  | <THEN> { System.out.println("Reconheceu THEN"); }
  | <CASE> { System.out.println("Reconheceu CASE"); }
  | <INPUT> { System.out.println("Reconheceu INPUT"); } 
  | <SELECT> { System.out.println("Reconheceu SELECT"); } 
  | <STATIC> { System.out.println("Reconheceu STATIC"); }
  | <WHILE> { System.out.println("Reconheceu WHILE"); }
  | <DO> { System.out.println("Reconheceu DO"); }
  | <SWITCH> { System.out.println("Reconheceu SWITCH"); } 
  | <DOUBLE> { System.out.println("Reconheceu DOUBLE"); }
  | <BYTE> { System.out.println("Reconheceu BYTE"); }
  | <SHORT> { System.out.println("Reconheceu SHORT"); } 
  | <LONG> { System.out.println("Reconheceu LONG"); } 
  | <FINAL> { System.out.println("Reconheceu FINAL"); }
  | <PUBLIC> { System.out.println("Reconheceu PUBLIC"); }
  | <PRIVATE> { System.out.println("Reconheceu PRIVATE"); } 
  | <PROTECTED> { System.out.println("Reconheceu PROTECTED"); } 
  | <CONSTANT> { System.out.println("Reconheceu CONSTANT"); }
  | <IDENTIFIER> { System.out.println("Reconheceu IDENTIFIER"); } 
  | <FLOAT> { System.out.println("Reconheceu FLOAT"); }
  | <BOOLEAN> { System.out.println("Reconheceu BOOLEAN"); }
  | <CHAR> { System.out.println("Reconheceu CHAR"); } 
  | <INTEGER> { System.out.println("Reconheceu INTEGER"); } 
  )*
}
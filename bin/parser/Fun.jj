options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;

public class Fun
{
   int contParseError = 0;
   boolean Menosshort = false; 
    
	public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    Fun parser = new Fun(System.in);
    String filename = "teste";
    int i;
    boolean ms = false;
    
    /*for (i=0 ; i < args.length - 1 ; i++) {
    	if ( args[i].toLowerCase().equals("-short"))
    		ms = true;
    	else {
    		System.out.println("Método de uso é: Java LangFun [-short] inputfile");
    		System.exit(0);
    	}
    }*/
    //if (args[i].equals("-"))
    if (false)
    {
    	System.out.println("Lendo entrada padrão..");
    	parser = new Fun(System.in);
   
    } else
    {
    	//filename = args[args.length-1];
    	//filename = args[args.length-1];
    	System.out.println("Lendo do arquivo " +  filename);
    	try {
    		parser = new Fun (new java.io.FileInputStream(filename) );
    	} catch (java.io.FileNotFoundException e) {
    		System.out.println("Arquivo " + filename + " não encontrado.");
    		return;
    	}  	
    }
    
     //parser.debug_recovery = debug_recovery;
     if (!debug) parser.disable_tracing(); // desabilita verbose do AS
       try {
               parser.program();   // chama o método que faz a análise
       }
       catch (ParseException e)
       {
           System.err.println(e.getMessage());
       parser.contParseError = 1;  //  não existe recuperação de erros
       }
       finally {
           System.out.println(parser.token_source.foundLexError() + " erros léxico encontrados");
           System.out.println(parser.contParseError + " erros sintáticos encontrados");
       }

    
	}
	static public String im(int x)
        {
            int k;
            String s;
            s = tokenImage[x];
            k = s.lastIndexOf("\"");
            try {s = s.substring(1,k);}
            catch (StringIndexOutOfBoundsException e)
            {}
            return s;
        }
}

PARSER_END(Fun)

TOKEN_MGR_DECLS : {
int	countLexError = 0;

public int foundLexError() {
	return countLexError;
  }
}
  
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

//comentário de bloco
SKIP : 
{ 
 "/*" : multilinecomment
}

<multilinecomment> SKIP :
{ 
 "*/" : DEFAULT
| <~[]>
}

//comentário de linha
SKIP : 
{ 
 "//" : singlelinecomment
}

<singlelinecomment> SKIP :
{ 
 <["\n","\r"]> : DEFAULT
| <~[]>
}

TOKEN : /* OPERATORS */
{
  < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NEQ : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REM : "%" >

/*added*/

| < AND: "and">
| < OR: "or">
| < XOR: "xor">
| < NOT: "not">
}

// SIMBOLOS ESPECIAIS
TOKEN :
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < DOT : "." >
}
//RESERVED WORDS

TOKEN :
{
  <BREAK: "break">
| <CLASS: "class">
| <CONSTRUCTOR: "constructor">
| <ELSE: "else">
| <EXTENDS: "extends">
| <FOR: "for">
| <IF: "if">
| <NEW: "new">
| <PRINT: "print">
| <READ: "read">
| <RETURN: "return">
| <SUPER: "super">
| <INT: "int">
| <STRING: "string">
| <FLOAT: "float">
| <BOOLEAN: "boolean">
| <CHAR: "char">
}

//IDENTIFIER TOKEN

TOKEN : /* CONSTANTES NUMERICAS */
{
		< float_constant: <int_constant> "." ( <int_constant> )+ >
  | 	< int_constant: ( <DIGIT> )+
  |     (["0"-"7"] (["0"-"7"])* ["o", "O"] ) 
  |     ((<DIGIT> | ["A"-"F","a"-"f"])* ["h", "H"] )
  |     (["0"-"1"] (["0"-"1"])* ["b", "B"]) >
  | 	< #DIGIT: ["0" - "9"] >
}

TOKEN : {
  
  <#LETTER: (["a"-"z","A"-"Z"])> 
| <CONSTANT : (< DIGIT >)+ >
| <boolean_constant: <TRUE> | <FALSE>  >
| <char_constant :"'"~[]"'" | "'\\n'" >
| <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(["$"])?>
| <string_constant: "\""( ~["\"","\n","\r"])* "\"" >
| <#TRUE: "true" | "TRUE" >
| <#FALSE: "false" | "FALSE" >
| <null_constant: "null" >
}

//TOKEN P/ LANÇAR ERRO LÉXICO
SPECIAL_TOKEN : {
<INVALID_LEXICAL:
(~["a"-"z", "A"-"Z",
   "0"-"9",
   "\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	"<",
	">",
	"=",
	";",
	",",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"])+> {
	  	System.err.println("Line " + input_stream.getEndLine() + " - invalid string found: " + image);
	  	countLexError++;
	 }	
| < INVALID_CONST:
	"\"" (~ ["\n","\r","\""])* ["\n","\r"] > {
	    System.err.println("Line " + input_stream.getEndLine() + " - String constant has a \\n: " + image);
	  	countLexError++;
	  }
| < INVALID_CHAR:
	"'" (~ ["\n","\r","'"])* ["\n","\r"] > {
	    System.err.println("Line " + input_stream.getEndLine() + " - Char constant has a \\n: " + image);
	  	countLexError++;
	  }

}


void program() :
{}
{
  [ classlist()] <EOF >
  /*
  (
    <PLUS> { System.out.println("Reconheceu PLUS"); } 
  | <MINUS> { System.out.println("Reconheceu MINUS"); } 
  | <MULTIPLY> { System.out.println("Reconheceu MULTIPLY"); } 
  | <DIVIDE> { System.out.println("Reconheceu DIVIDE"); }
  | <ASSIGN> { System.out.println("Reconheceu ASSIGN"); }
  | <GT> { System.out.println("Reconheceu GT"); } 
  | <LT> { System.out.println("Reconheceu LT"); } 
  | <EQ> { System.out.println("Reconheceu EQ"); } 
  | <LE> { System.out.println("Reconheceu LE"); }
  | <GE> { System.out.println("Reconheceu GE"); }
  | <NEQ> { System.out.println("Reconheceu NEQ"); } 
  | <REM> { System.out.println("Reconheceu REM"); } 
  | <AND> { System.out.println("Reconheceu AND"); } 
  | <OR> { System.out.println("Reconheceu OR"); }
  | <XOR> { System.out.println("Reconheceu XOR"); }
  | <NOT> { System.out.println("Reconheceu NOT"); } 
  | <SEMICOLON> { System.out.println("Reconheceu SEMICOLON"); } 
  | <COMMA> { System.out.println("Reconheceu COMMA"); } 
  | <LPAREN> { System.out.println("Reconheceu LPAREN"); }
  | <RPAREN> { System.out.println("Reconheceu RPAREN"); }
  | <LBRACKET> { System.out.println("Reconheceu LBRACKET"); } 
  | <RBRACKET> { System.out.println("Reconheceu RBRACKET"); } 
  | <LBRACE> { System.out.println("Reconheceu LBRACE"); } 
  | <RBRACE> { System.out.println("Reconheceu RBRACE"); }
  | <DOT> { System.out.println("Reconheceu DOT"); }
  | <BREAK> { System.out.println("Reconheceu BREAK"); } 
  | <CLASS> { System.out.println("Reconheceu CLASS"); } 
  | <CONSTRUCTOR> { System.out.println("Reconheceu CONSTRUCTOR"); } 
  | <ELSE> { System.out.println("Reconheceu ELSE"); }
  | <EXTENDS> { System.out.println("Reconheceu EXTENDS"); }
  | <FOR> { System.out.println("Reconheceu FOR"); } 
  | <IF> { System.out.println("Reconheceu IF"); } 
  | <INT> { System.out.println("Reconheceu INT"); }
  | <NEW> { System.out.println("Reconheceu NEW"); }
  | <PRINT> { System.out.println("Reconheceu PRINT"); }
  | <READ> { System.out.println("Reconheceu READ"); } 
  | <RETURN> { System.out.println("Reconheceu RETURN"); } 
  | <STRING> { System.out.println("Reconheceu STRING"); }
  | <SUPER> { System.out.println("Reconheceu SUPER"); } 
  | <CONSTANT> { System.out.println("Reconheceu CONSTANT"); }
  | <IDENTIFIER> { System.out.println("Reconheceu IDENTIFIER"); } 
  | <FLOAT> { System.out.println("Reconheceu FLOAT"); }
  | <BOOLEAN> { System.out.println("Reconheceu BOOLEAN"); }
  | <CHAR> { System.out.println("Reconheceu CHAR"); } 
  | <INTEGER> { System.out.println("Reconheceu INTEGER"); } 
  )**/
}
void classlist():
{
}
{
   classdecl()[classlist()]
}

void classdecl() :
{
}
{
  <CLASS> <IDENTIFIER> [ <EXTENDS> <IDENTIFIER> ] classbody()
}

void classbody() :
{
}
{
    <LBRACE>
      [classlist()]
      (LOOKAHEAD(3) vardecl() <SEMICOLON>)*
      (LOOKAHEAD(3) constructdecl() | LOOKAHEAD(3) methoddecl() | LOOKAHEAD(3) vardecl() <SEMICOLON>)*
   <RBRACE>
}

void vardecl() :
{
}
{
  /*types() <IDENTIFIER> ( <LBRACKET> <RBRACKET>)* 
  (<COMMA> <IDENTIFIER> ( <LBRACKET> <RBRACKET>)* )* */

  types() <IDENTIFIER> ( <LBRACKET> <RBRACKET>)* (LOOKAHEAD(1) assignment())?
  (<COMMA> <IDENTIFIER> ( <LBRACKET> <RBRACKET>)* )* (LOOKAHEAD(1) assignment())?
}

void constructdecl():
{
}
{
    <CONSTRUCTOR> methodbody()
}

//SIMPLIFICAÇÃO DE CODIGO, SE VC ESTIVER LENDO ISSO PROFESSOR, NAO DESCONTE 1 PONTO NOSSO. ATT, A DIREÇAO
void types() :
{
}
{
  ( <INT> | <FLOAT> | <CHAR> | <STRING> | <IDENTIFIER> | <BOOLEAN>) 
}

void methoddecl():
{
}
{
   types() (<LBRACKET> <RBRACKET>)* 
   <IDENTIFIER> methodbody()
}

void methodbody():
{
}
{
    <LPAREN> paramlist() <RPAREN> statement()

}

void paramlist():
{
}
{
   [
    types() <IDENTIFIER> (<LBRACKET> <RBRACKET>)*(LOOKAHEAD(1) assignment())?
    (<COMMA> types() <IDENTIFIER> (<LBRACKET> <RBRACKET>)* (LOOKAHEAD(1) assignment())?)* 
	
   ]
}

void statement() :
{
}
{
    LOOKAHEAD(2)
    vardecl() <SEMICOLON>
|
    atribstat() <SEMICOLON> 
|
    printstat() <SEMICOLON>
|
    readstat() <SEMICOLON>
|
    returnstat() <SEMICOLON>
|
    superstat() <SEMICOLON>
|
    ifstat() 
|
    forstat() 
|
    <LBRACE> statlist() <RBRACE> 
|
    <BREAK> <SEMICOLON>
|
    <SEMICOLON>
}

void atribstat() :
{
}
{
    lvalue() assignment()
}

void printstat() :
{
}
{
    <PRINT> expression()
}

void readstat() :
{
}
{
    <READ> lvalue()
}


void returnstat() :
{
}
{  
    <RETURN> [expression()]
}


void superstat() :
{
}
{
    <SUPER> <LPAREN> arglist() <RPAREN>
}

void ifstat() :
{
}
{
    <IF> <LPAREN> expression() <RPAREN> statement()
    [LOOKAHEAD(1) <ELSE> statement()]
}



void forstat() :
{
}
{
    <FOR> <LPAREN> [atribstat()] <SEMICOLON>
                   [expression()] <SEMICOLON>
                   [atribstat()] <RPAREN>
                    statement()
}

void assignment() :
{
}
{
    <ASSIGN> (alocexpression() | expression())
}

void  statlist() :
{
}
{
   statement() [statlist()]
}

void lvalue() :
{
}
{
   <IDENTIFIER> (
           <LBRACKET> expression() <RBRACKET> |
           <DOT> <IDENTIFIER> [<LPAREN> arglist() <RPAREN>]
         )*
}

void alocexpression() :
{
}
{
    <NEW> ( 
             LOOKAHEAD(2) <IDENTIFIER> <LPAREN> arglist() <RPAREN> | 
             types()
             (<LBRACKET> expression() <RBRACKET>)+
          )
} 

void expression() :
{
}
{
    numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ> | <AND> | <OR> | <XOR>) numexpr()]
}

void numexpr() :
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term() :
{
}
{
    unaryexpr() ((<MULTIPLY> | <DIVIDE>| <REM>) unaryexpr())*
}

void unaryexpr() :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor() :
{
}
{

   (<NOT>)? 
    ( 
       <char_constant> |
       <int_constant> | 
       <float_constant> | 
       <string_constant> | 
       <boolean_constant> |
       <null_constant> |
       lvalue() |
       <LPAREN> expression() <RPAREN>)
}

void arglist() :
{
}
{
    [expression() (<COMMA> expression())*]
}
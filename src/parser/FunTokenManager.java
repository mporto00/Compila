/* Generated By:JavaCC: Do not edit this line. FunTokenManager.java */
package parser;
import java.io.*;
import recovery.*;

/** Token Manager. */
public class FunTokenManager implements FunConstants
{
int     countLexError = 0;

public int foundLexError() {
        return countLexError;
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7f8000e000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 61;
            return 62;
         }
         if ((active0 & 0x3003e001000000L) != 0L)
         {
            jjmatchedKind = 61;
            return 63;
         }
         if ((active0 & 0x8040000000000L) != 0L)
         {
            jjmatchedKind = 61;
            return 14;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 64;
         }
         if ((active0 & 0x80002000000L) != 0L)
            return 62;
         if ((active0 & 0x1ff7e00d000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 62;
         }
         return -1;
      case 2:
         if ((active0 & 0x3de3e000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 62;
         }
         if ((active0 & 0x214000d000000L) != 0L)
            return 62;
         return -1;
      case 3:
         if ((active0 & 0x1da2e000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 62;
         }
         if ((active0 & 0x20410000000000L) != 0L)
            return 62;
         return -1;
      case 4:
         if ((active0 & 0x14828000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 62;
         }
         if ((active0 & 0x9206000000000L) != 0L)
            return 62;
         return -1;
      case 5:
         if ((active0 & 0x10028000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
            return 62;
         }
         if ((active0 & 0x4800000000000L) != 0L)
            return 62;
         return -1;
      case 6:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 62;
         }
         if ((active0 & 0x10020000000000L) != 0L)
            return 62;
         return -1;
      case 7:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
            return 62;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
            return 62;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
            return 62;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 23);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 42:
         return jjStopAtPos(0, 21);
      case 43:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 29);
      case 45:
         return jjStopAtPos(0, 20);
      case 46:
         return jjStartNfaWithStates_0(0, 36, 23);
      case 47:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x0L);
      case 59:
         return jjStopAtPos(0, 28);
      case 60:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 61:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 62:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 32);
      case 93:
         return jjStopAtPos(0, 33);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10002000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000c000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8040000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2080000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100008000000L, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x5000000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 34);
      case 125:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xd00000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 62);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8014000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004800c000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 62);
         return jjMoveStringLiteralDfa2_0(active0, 0x202000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20404000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 62);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 62);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 62);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 62);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 62);
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8002000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 62);
         break;
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 62);
         return jjMoveStringLiteralDfa4_0(active0, 0x1020000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 62);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 62);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 62);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4020000000000L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 62);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 62);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 62);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 62);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 103:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 62);
         break;
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 62);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 62);
         break;
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 62);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 3:
                  if ((0x840040d8ffffc9ffL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(23);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                     jjCheckNAddStates(4, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddStates(8, 11);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(23, 27);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 16:
               case 54:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 19:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 36 && kind > 61)
                     kind = 61;
                  break;
               case 23:
                  if ((0x840040d8ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(8, 11);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAddStates(23, 27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddStates(23, 27);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 47:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 48:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  break;
               case 53:
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((0x2400L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 57:
                  if (curChar == 34)
                     jjCheckNAddStates(4, 7);
                  break;
               case 58:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 60:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if ((0x2400L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if ((0xd0000001d0000001L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(23);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(26);
                  }
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 62:
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(26);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if (curChar == 69 && kind > 59)
                     kind = 59;
                  break;
               case 1:
                  if (curChar == 85)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 101 && kind > 59)
                     kind = 59;
                  break;
               case 5:
                  if (curChar == 117)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 83)
                     jjCheckNAdd(0);
                  break;
               case 9:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 115)
                     jjCheckNAdd(4);
                  break;
               case 13:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((0xd0000001d0000001L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(23);
                  break;
               case 29:
                  if ((0x800000008000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddStates(23, 27);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if ((0x10000000100L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddStates(23, 27);
                  break;
               case 33:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddStates(23, 27);
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 40:
                  if ((0x800000008000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if ((0x10000000100L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 46:
                  if ((0x10000000100L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(26);
                  break;
               case 49:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 51:
                  if ((0x400000004L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 53:
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  jjAddStates(28, 29);
                  break;
               case 58:
                  jjAddStates(30, 31);
                  break;
               case 60:
                  jjAddStates(32, 33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 23:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(23);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(32, 33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   42, 43, 44, 45, 58, 59, 60, 61, 25, 26, 34, 35, 53, 55, 56, 37, 
   38, 39, 40, 48, 49, 50, 51, 27, 28, 30, 31, 32, 55, 56, 58, 59, 
   60, 61, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\75", 
"\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\53", "\55", "\52", "\57", 
"\45", "\141\156\144", "\157\162", "\170\157\162", "\156\157\164", "\73", "\54", 
"\50", "\51", "\133", "\135", "\173", "\175", "\56", "\142\162\145\141\153", 
"\143\154\141\163\163", "\143\157\156\163\164\162\165\143\164\157\162", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\157\162", "\151\146", "\156\145\167", "\160\162\151\156\164", 
"\162\145\141\144", "\162\145\164\165\162\156", "\163\165\160\145\162", "\151\156\164", 
"\163\164\162\151\156\147", "\146\154\157\141\164", "\142\157\157\154\145\141\156", "\143\150\141\162", 
null, null, null, null, null, null, null, null, null, null, null, 
"\156\165\154\154", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "multilinecomment",
   "singlelinecomment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7cfffffffffff001L, 0x2L, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x1cL, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1cL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[62];
private final int[] jjstateSet = new int[124];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public FunTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public FunTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 11)
       {
          jjmatchedKind = 11;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 66 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.err.println("Line " + input_stream.getEndLine() + " - invalid string found: " + image);
                countLexError++;
         break;
      case 67 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            System.err.println("Line " + input_stream.getEndLine() + " - String constant has a \u005c\u005cn: " + image);
                countLexError++;
         break;
      case 68 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            System.err.println("Line " + input_stream.getEndLine() + " - Char constant has a \u005c\u005cn: " + image);
                countLexError++;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

/* Generated By:JavaCC: Do not edit this line. Fun.java */
package parser;

public class Fun implements FunConstants {
   int contParseError = 0;
   boolean Menosshort = false;

        public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    Fun parser = new Fun(System.in);
    String filename = "nao-aceitos.txt";
    int i;
    boolean ms = false;

    /*for (i=0 ; i < args.length - 1 ; i++) {
    	if ( args[i].toLowerCase().equals("-short"))
    		ms = true;
    	else {
    		System.out.println("Método de uso é: Java LangFun [-short] inputfile");
    		System.exit(0);
    	}
    }*/
    //if (args[i].equals("-"))
    if (false)
    {
        System.out.println("Lendo entrada padr\u00e3o..");
        parser = new Fun(System.in);

    } else
    {
        //filename = args[args.length-1];
        //filename = args[args.length-1];
        System.out.println("Lendo do arquivo " +  filename);
        try {
                parser = new Fun (new java.io.FileInputStream(filename) );
        } catch (java.io.FileNotFoundException e) {
                System.out.println("Arquivo " + filename + " n\u00e3o encontrado.");
                return;
        }
    }

     parser.debug_recovery = debug_recovery;
     if (!debug) parser.disable_tracing(); // desabilita verbose do AS
       try {
               parser.program();   // chama o método que faz a análise
       }
       catch (ParseEOFException e)
       {
           System.err.println(e.getMessage());
       parser.contParseError = 1;  //  não existe recuperação de erros
       }
       finally {
           System.out.println(parser.token_source.foundLexError() + " erros l\u00e9xico encontrados");
           System.out.println(parser.contParseError + "erros sint\u00e1ticos encontrados");
       }


        }
        static public String im(int x)
        {
            int k;
            String s;
            s = tokenImage[x];
            k = s.lastIndexOf("\u005c"");
            try {s = s.substring(1,k);}
            catch (StringIndexOutOfBoundsException e)
            {}
            return s;
        }

  final public void program() throws ParseException {
    trace_call("program");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case GT:
        case LT:
        case EQ:
        case LE:
        case GE:
        case NEQ:
        case PLUS:
        case MINUS:
        case MULTIPLY:
        case DIVIDE:
        case REM:
        case AND:
        case OR:
        case XOR:
        case NOT:
        case SEMICOLON:
        case COMMA:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case DOT:
        case BREAK:
        case CLASS:
        case CONSTRUCTOR:
        case ELSE:
        case EXTENDS:
        case FOR:
        case IF:
        case INT:
        case NEW:
        case PRINT:
        case READ:
        case RETURN:
        case SUPER:
        case FLOAT:
        case INTEGER:
        case CONSTANT:
        case BOOLEAN:
        case CHAR:
        case IDENTIFIER:
        case STRING:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
             System.out.println("Reconheceu PLUS");
          break;
        case MINUS:
          jj_consume_token(MINUS);
              System.out.println("Reconheceu MINUS");
          break;
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
                 System.out.println("Reconheceu MULTIPLY");
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
               System.out.println("Reconheceu DIVIDE");
          break;
        case ASSIGN:
          jj_consume_token(ASSIGN);
               System.out.println("Reconheceu ASSIGN");
          break;
        case GT:
          jj_consume_token(GT);
           System.out.println("Reconheceu GT");
          break;
        case LT:
          jj_consume_token(LT);
           System.out.println("Reconheceu LT");
          break;
        case EQ:
          jj_consume_token(EQ);
           System.out.println("Reconheceu EQ");
          break;
        case LE:
          jj_consume_token(LE);
           System.out.println("Reconheceu LE");
          break;
        case GE:
          jj_consume_token(GE);
           System.out.println("Reconheceu GE");
          break;
        case NEQ:
          jj_consume_token(NEQ);
            System.out.println("Reconheceu NEQ");
          break;
        case REM:
          jj_consume_token(REM);
            System.out.println("Reconheceu REM");
          break;
        case AND:
          jj_consume_token(AND);
            System.out.println("Reconheceu AND");
          break;
        case OR:
          jj_consume_token(OR);
           System.out.println("Reconheceu OR");
          break;
        case XOR:
          jj_consume_token(XOR);
            System.out.println("Reconheceu XOR");
          break;
        case NOT:
          jj_consume_token(NOT);
            System.out.println("Reconheceu NOT");
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
                  System.out.println("Reconheceu SEMICOLON");
          break;
        case COMMA:
          jj_consume_token(COMMA);
              System.out.println("Reconheceu COMMA");
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
               System.out.println("Reconheceu LPAREN");
          break;
        case RPAREN:
          jj_consume_token(RPAREN);
               System.out.println("Reconheceu RPAREN");
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
                 System.out.println("Reconheceu LBRACKET");
          break;
        case RBRACKET:
          jj_consume_token(RBRACKET);
                 System.out.println("Reconheceu RBRACKET");
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
               System.out.println("Reconheceu LBRACE");
          break;
        case RBRACE:
          jj_consume_token(RBRACE);
               System.out.println("Reconheceu RBRACE");
          break;
        case DOT:
          jj_consume_token(DOT);
            System.out.println("Reconheceu DOT");
          break;
        case BREAK:
          jj_consume_token(BREAK);
              System.out.println("Reconheceu BREAK");
          break;
        case CLASS:
          jj_consume_token(CLASS);
              System.out.println("Reconheceu CLASS");
          break;
        case CONSTRUCTOR:
          jj_consume_token(CONSTRUCTOR);
                    System.out.println("Reconheceu CONSTRUCTOR");
          break;
        case ELSE:
          jj_consume_token(ELSE);
             System.out.println("Reconheceu ELSE");
          break;
        case EXTENDS:
          jj_consume_token(EXTENDS);
                System.out.println("Reconheceu EXTENDS");
          break;
        case FOR:
          jj_consume_token(FOR);
            System.out.println("Reconheceu FOR");
          break;
        case IF:
          jj_consume_token(IF);
           System.out.println("Reconheceu IF");
          break;
        case INT:
          jj_consume_token(INT);
            System.out.println("Reconheceu INT");
          break;
        case NEW:
          jj_consume_token(NEW);
            System.out.println("Reconheceu NEW");
          break;
        case PRINT:
          jj_consume_token(PRINT);
              System.out.println("Reconheceu PRINT");
          break;
        case READ:
          jj_consume_token(READ);
             System.out.println("Reconheceu READ");
          break;
        case RETURN:
          jj_consume_token(RETURN);
               System.out.println("Reconheceu RETURN");
          break;
        case STRING:
          jj_consume_token(STRING);
               System.out.println("Reconheceu STRING");
          break;
        case SUPER:
          jj_consume_token(SUPER);
              System.out.println("Reconheceu SUPER");
          break;
        case CONSTANT:
          jj_consume_token(CONSTANT);
                 System.out.println("Reconheceu CONSTANT");
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
                   System.out.println("Reconheceu IDENTIFIER");
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
              System.out.println("Reconheceu FLOAT");
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
                System.out.println("Reconheceu BOOLEAN");
          break;
        case CHAR:
          jj_consume_token(CHAR);
             System.out.println("Reconheceu CHAR");
          break;
        case INTEGER:
          jj_consume_token(INTEGER);
                System.out.println("Reconheceu INTEGER");
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("program");
    }
  }

  /** Generated Token Manager. */
  public FunTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffff000,0xfffff000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7cfffff,0x7cfffff,};
   }

  /** Constructor with InputStream. */
  public Fun(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Fun(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Fun(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Fun(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}

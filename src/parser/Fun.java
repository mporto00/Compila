/* Generated By:JavaCC: Do not edit this line. Fun.java */
package parser;

public class Fun implements FunConstants {
  public static void main(String args []) throws ParseException
  {
    Fun parser = new Fun(System.in);

        try {
        parser.program();
        System.out.println("Sucesso!");
        } catch (ParseException e) {
                System.out.println(e);
        } catch (TokenMgrError e) {
                System.out.println(e);
        }
  }

  final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case  ASSIGN:
      case  GT:
      case  LT:
      case  EQ:
      case  LE:
      case  GE:
      case  NEQ:
      case  PLUS:
      case  MINUS:
      case  MULTIPLY:
      case  DIVIDE:
      case  REM:
      case  AND:
      case  OR:
      case  XOR:
      case  NOT:
      case  SEMICOLON:
      case  COMMA:
      case  LPAREN:
      case  RPAREN:
      case  LBRACKET:
      case  RBRACKET:
      case  LBRACE:
      case  RBRACE:
      case  DOT:
      case  BREAK:
      case CLASS:
      case CONSTRUCTOR:
      case ELSE:
      case EXTENDS:
      case FOR:
      case IF:
      case INT:
      case NEW:
      case PRINT:
      case READ:
      case RETURN:
      case STRING:
      case SUPER:
      case END:
      case SUB:
      case LET:
      case CALL:
      case THEN:
      case CASE:
      case INPUT:
      case SELECT:
      case STATIC:
      case WHILE:
      case DO:
      case SWITCH:
      case DEFAULT:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case FINAL:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case DIGIT:
      case CONSTANT:
      case IDENTIFIER:
      case LETTER:
      case FLOAT:
      case BOOLEAN:
      case CHAR:
      case INTEGER:
    	  
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
          jj_consume_token(GT);
                 System.out.println("Reconheceu GT");
          break;  
      case LT:
          jj_consume_token(LT);
                 System.out.println("Reconheceu LT");
          break;
      case EQ:
          jj_consume_token(EQ);
                 System.out.println("Reconheceu EQ");
          break;

      case LE:
          jj_consume_token(LE);
                 System.out.println("Reconheceu LE");
          break;

      case GE:
          jj_consume_token(GE);
                 System.out.println("Reconheceu GE");
          break;
      case NEQ:
          jj_consume_token(NEQ);
                 System.out.println("Reconheceu NEQ");
          break;
      case PLUS:
          jj_consume_token(PLUS);
                 System.out.println("Reconheceu PLUS");
          break;
      case MINUS:
          jj_consume_token(MINUS);
                 System.out.println("Reconheceu MINUS");
          break;
      case MULTIPLY:
          jj_consume_token(MULTIPLY);
                 System.out.println("Reconheceu MULTIPLY");
          break;
      case DIVIDE:
          jj_consume_token(DIVIDE);
                 System.out.println("Reconheceu DIVIDE");
          break;
      case REM:
          jj_consume_token(REM);
                 System.out.println("Reconheceu REM");
          break;
      case AND:
          jj_consume_token(AND);
                 System.out.println("Reconheceu AND");
          break;
      case OR:
          jj_consume_token(OR);
                 System.out.println("Reconheceu OR");
          break;
      case XOR:
          jj_consume_token(XOR);
                 System.out.println("Reconheceu XOR");
          break;
      case NOT:
          jj_consume_token(NOT);
                 System.out.println("Reconheceu NOT");
          break;
      case SEMICOLON:
          jj_consume_token(SEMICOLON);
                 System.out.println("Reconheceu SEMICOLON");
          break;
      case COMMA:
          jj_consume_token(COMMA);
                 System.out.println("Reconheceu COMMA");
          break;
      case LPAREN:
          jj_consume_token(LPAREN);
                 System.out.println("Reconheceu LPAREN");
          break;
      case RPAREN:
          jj_consume_token(RPAREN);
                 System.out.println("Reconheceu RPAREN");
          break;
      case LBRACKET:
          jj_consume_token(LBRACKET);
                 System.out.println("Reconheceu LBRACKET");
          break;
      case RBRACKET:
          jj_consume_token(RBRACKET);
                 System.out.println("Reconheceu RBRACKET");
          break;
      case LBRACE:
          jj_consume_token(LBRACE);
                 System.out.println("Reconheceu LBRACE");
          break;
      case RBRACE:
          jj_consume_token(RBRACE);
                 System.out.println("Reconheceu RBRACE");
          break;
      case DOT:
          jj_consume_token(DOT);
                 System.out.println("Reconheceu DOT");
          break;
      case BREAK:
          jj_consume_token(BREAK);
                 System.out.println("Reconheceu BREAK");
          break;
      case CLASS:
          jj_consume_token(CLASS);
                 System.out.println("Reconheceu CLASS");
          break;
      case CONSTRUCTOR:
          jj_consume_token(CONSTRUCTOR);
                 System.out.println("Reconheceu CONSTRUCTOR");
          break;
      case ELSE:
          jj_consume_token(ELSE);
                 System.out.println("Reconheceu ELSE");
          break;
      case EXTENDS:
          jj_consume_token(EXTENDS);
                 System.out.println("Reconheceu EXTENDS");
          break;
      case FOR:
          jj_consume_token(FOR);
                 System.out.println("Reconheceu FOR");
          break;
      case IF:
          jj_consume_token(IF);
                 System.out.println("Reconheceu IF");
          break;
      case INT:
          jj_consume_token(INT);
                 System.out.println("Reconheceu INT");
          break;
      case NEW:
          jj_consume_token(NEW);
                 System.out.println("Reconheceu NEW");
          break;
      case PRINT:
          jj_consume_token(PRINT);
                 System.out.println("Reconheceu PRINT");
          break;
      case READ:
          jj_consume_token(READ);
                 System.out.println("Reconheceu READ");
          break;
      case RETURN:
          jj_consume_token(RETURN);
                 System.out.println("Reconheceu RETURN");
          break;
      case STRING:
          jj_consume_token(STRING);
                 System.out.println("Reconheceu STRING");
          break;
      case SUPER:
          jj_consume_token(SUPER);
                 System.out.println("Reconheceu SUPER");
          break;
      case END:
          jj_consume_token(END);
                 System.out.println("Reconheceu END");
          break;
      case SUB:
          jj_consume_token(SUB);
                 System.out.println("Reconheceu SUB");
          break;
      case LET:
          jj_consume_token(LET);
                 System.out.println("Reconheceu LET");
          break;
      case CALL:
          jj_consume_token(CALL);
                 System.out.println("Reconheceu CALL");
          break;
      case THEN:
          jj_consume_token(THEN);
                 System.out.println("Reconheceu THEN");
          break;
      case CASE:
          jj_consume_token(CASE);
                 System.out.println("Reconheceu CASE");
          break;
      case INPUT:
          jj_consume_token(INPUT);
                 System.out.println("Reconheceu INPUT");
          break;
      case SELECT:
          jj_consume_token(SELECT);
                 System.out.println("Reconheceu SELECT");
          break;
      case STATIC:
          jj_consume_token(STATIC);
                 System.out.println("Reconheceu STATIC");
          break;
      case WHILE:
          jj_consume_token(WHILE);
                 System.out.println("Reconheceu WHILE");
          break;
      case DO:
          jj_consume_token(DO);
                 System.out.println("Reconheceu DO");
          break;
      case SWITCH:
          jj_consume_token(SWITCH);
                 System.out.println("Reconheceu SWITCH");
          break;
      case DEFAULT:
          jj_consume_token(DEFAULT);
                 System.out.println("Reconheceu DEFAULT");
          break;
      case DOUBLE:
          jj_consume_token(DOUBLE);
                 System.out.println("Reconheceu DOUBLE");
          break;
      case BYTE:
          jj_consume_token(BYTE);
                 System.out.println("Reconheceu BYTE");
          break;
      case SHORT:
          jj_consume_token(SHORT);
                 System.out.println("Reconheceu SHORT");
          break;
      case LONG:
          jj_consume_token(LONG);
                 System.out.println("Reconheceu LONG");
          break;
      case FINAL:
          jj_consume_token(FINAL);
                 System.out.println("Reconheceu FINAL");
          break;
      case PUBLIC:
          jj_consume_token(PUBLIC);
                 System.out.println("Reconheceu PUBLIC");
          break;
      case PRIVATE:
          jj_consume_token(PRIVATE);
                 System.out.println("Reconheceu PRIVATE");
          break;
      case PROTECTED:
          jj_consume_token(PROTECTED);
                 System.out.println("Reconheceu PROTECTED");
          break;
      case DIGIT:
          jj_consume_token(DIGIT);
                 System.out.println("Reconheceu DIGIT");
          break;
	  case CONSTANT:
	       jj_consume_token(CONSTANT);
	              System.out.println("Reconheceu CONSTANT");
	       break;
	   case IDENTIFIER:
	       jj_consume_token(IDENTIFIER);
	              System.out.println("Reconheceu IDENTIFIER");
	       break;
	   case LETTER:
	       jj_consume_token(LETTER);
	              System.out.println("Reconheceu LETTER");
	       break;
	   case FLOAT:
	       jj_consume_token(FLOAT);
	              System.out.println("Reconheceu FLOAT");
	       break;
	   case BOOLEAN:
	       jj_consume_token(BOOLEAN);
	              System.out.println("Reconheceu BOOLEAN");
	       break;
	   case CHAR:
	       jj_consume_token(CHAR);
	              System.out.println("Reconheceu CHAR");
	       break;
	   case INTEGER:
	       jj_consume_token(INTEGER);
	              System.out.println("Reconheceu INTEGER");
	       break;

      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public FunTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x780000,0x780000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Fun(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Fun(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Fun(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Fun(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

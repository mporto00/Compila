/* Generated By:JavaCC: Do not edit this line. FunConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FunConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 11;
  /** RegularExpression Id. */
  int MINUS = 12;
  /** RegularExpression Id. */
  int MULTIPLY = 13;
  /** RegularExpression Id. */
  int DIVIDE = 14;
  /** RegularExpression Id. */
  int SEMICOLON = 15;
  /** RegularExpression Id. */
  int COMMA = 16;
  /** RegularExpression Id. */
  int LPAREN = 17;
  /** RegularExpression Id. */
  int RPAREN = 18;
  /** RegularExpression Id. */
  int LSQUARE = 19;
  /** RegularExpression Id. */
  int RSQUARE = 20;
  /** RegularExpression Id. */
  int LCURL = 21;
  /** RegularExpression Id. */
  int RCURL = 22;
  /** RegularExpression Id. */
  int LANGLE = 23;
  /** RegularExpression Id. */
  int RANGLE = 24;
  /** RegularExpression Id. */
  int EQUALTO = 25;
  /** RegularExpression Id. */
  int EQUALTO_EQUALTO = 26;
  /** RegularExpression Id. */
  int LANGLE_EQUALTO = 27;
  /** RegularExpression Id. */
  int RANGLE_EQUALTO = 28;
  /** RegularExpression Id. */
  int BANG_EQUALTO = 29;
  /** RegularExpression Id. */
  int PIPE_PIPE = 30;
  /** RegularExpression Id. */
  int AMPERSAND_AMPERSAND = 31;
  /** RegularExpression Id. */
  int BANG = 32;
  /** RegularExpression Id. */
  int DOT = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int END = 36;
  /** RegularExpression Id. */
  int SUB = 37;
  /** RegularExpression Id. */
  int LET = 38;
  /** RegularExpression Id. */
  int CALL = 39;
  /** RegularExpression Id. */
  int THEN = 40;
  /** RegularExpression Id. */
  int CASE = 41;
  /** RegularExpression Id. */
  int ELSE = 42;
  /** RegularExpression Id. */
  int INPUT = 43;
  /** RegularExpression Id. */
  int PRINT = 44;
  /** RegularExpression Id. */
  int SELECT = 45;
  /** RegularExpression Id. */
  int STATIC = 46;
  /** RegularExpression Id. */
  int STRING = 47;
  /** RegularExpression Id. */
  int SUPER = 48;
  /** RegularExpression Id. */
  int RETURN = 49;
  /** RegularExpression Id. */
  int READ = 50;
  /** RegularExpression Id. */
  int NEW = 51;
  /** RegularExpression Id. */
  int INT = 52;
  /** RegularExpression Id. */
  int FOR = 53;
  /** RegularExpression Id. */
  int EXTENDS = 54;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 55;
  /** RegularExpression Id. */
  int CLASS = 56;
  /** RegularExpression Id. */
  int BREAK = 57;
  /** RegularExpression Id. */
  int DIGIT = 58;
  /** RegularExpression Id. */
  int CONSTANT = 59;
  /** RegularExpression Id. */
  int IDENTIFIER = 60;
  /** RegularExpression Id. */
  int LETTER = 61;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 62;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"//\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\".\"",
    "\"not\"",
    "\"if\"",
    "\"end\"",
    "\"sub\"",
    "\"let\"",
    "\"call\"",
    "\"then\"",
    "\"case\"",
    "\"else\"",
    "\"input\"",
    "\"print\"",
    "\"select\"",
    "\"static\"",
    "\"string\"",
    "\"super\"",
    "\"return\"",
    "\"read\"",
    "\"new\"",
    "\"int\"",
    "\"for\"",
    "\"extends\"",
    "\"constructor\"",
    "\"class\"",
    "\"break\"",
    "<DIGIT>",
    "<CONSTANT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<INVALID_LEXICAL>",
  };

}
